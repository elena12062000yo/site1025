# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import json

# –î–∞–Ω–Ω—ã–µ –æ —É—Å–ª—É–≥–∞—Ö
SERVICES_DATA = {
    'order_twin': {
        'name': 'ü§ñ –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫',
        'price': '–û—Ç 15,000‚ÇΩ',
        'time': '2-3 –Ω–µ–¥–µ–ª–∏',
        'description': '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π AI-–º–æ–¥–µ–ª–∏ –ø–æ –≤–∞—à–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º'
    },
    'order_photo': {
        'name': 'üì∏ AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è',
        'price': '–û—Ç 5,000‚ÇΩ', 
        'time': '3-5 –¥–Ω–µ–π',
        'description': '–ü–∞–∫–µ—Ç AI-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ª—é–±–æ–π —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ'
    },
    'order_video': {
        'name': 'üé¨ AI-—Å–Ω–∏–ø–ø–µ—Ç',
        'price': '–û—Ç 3,000‚ÇΩ',
        'time': '2-3 –¥–Ω—è', 
        'description': '–ö–æ—Ä–æ—Ç–∫–∏–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Ä–æ–ª–∏–∫ 9-15 —Å–µ–∫—É–Ω–¥'
    },
    'order_cover': {
        'name': 'üé® –û–±–ª–æ–∂–∫–∞ —Ä–µ–ª–∏–∑–∞',
        'price': '–û—Ç 2,000‚ÇΩ',
        'time': '1-2 –¥–Ω—è',
        'description': '–î–∏–∑–∞–π–Ω –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞'
    },
    'order_commercial': {
        'name': 'üíº –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å—ä–µ–º–∫–∞',
        'price': '–û—Ç 8,000‚ÇΩ',
        'time': '5-7 –¥–Ω–µ–π',
        'description': '–†–µ–∫–ª–∞–º–Ω—ã–µ –≤–∏–∑—É–∞–ª—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏'
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞
ORDER_STATES = {}

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    from alyx_bot import db, MESSAGES, get_main_keyboard, get_services_keyboard, get_portfolio_keyboard, WEBSITE_URL, OWNER_ID
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
    db.update_last_seen(user_id)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if data == "back_to_main":
        await query.edit_message_text(
            MESSAGES['start'],
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
    
    elif data == "portfolio":
        await query.edit_message_text(
            MESSAGES['portfolio'],
            parse_mode='HTML',
            reply_markup=get_portfolio_keyboard()
        )
    
    elif data == "services":
        await query.edit_message_text(
            MESSAGES['services'],
            parse_mode='HTML',
            reply_markup=get_services_keyboard()
        )
    
    elif data == "contact":
        keyboard = [
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å @alyx_babysitter", url="https://t.me/alyx_babysitter")],
            [InlineKeyboardButton("üìã –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="start_order")],
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", web_app={"url": WEBSITE_URL})],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            MESSAGES['contact'],
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "about":
        keyboard = [
            [InlineKeyboardButton("üì± –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram", url="https://t.me/alyx_babysitter")],
            [InlineKeyboardButton("üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", web_app={"url": WEBSITE_URL})],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            MESSAGES['about'],
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
    elif data == "subscribe":
        db.subscribe_user(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n\n<i>–û–±—ã—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é 1-2 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–¥–µ–ª—é.</i>",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "unsubscribe":
        db.unsubscribe_user(user_id)
        
        await query.edit_message_text(
            "üîï <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞!",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
    
    # –°–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤
    elif data.startswith("order_"):
        service = SERVICES_DATA.get(data)
        if service:
            keyboard = [
                [InlineKeyboardButton("üìã –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"create_{data}")],
                [InlineKeyboardButton("üí¨ –û–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏", url="https://t.me/alyx_babysitter")],
                [InlineKeyboardButton("üîô –ö —É—Å–ª—É–≥–∞–º", callback_data="services")]
            ]
            
            message = f"""<b>{service['name']}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {service['price']}
‚è∞ <b>–°—Ä–æ–∫–∏:</b> {service['time']}

üìù <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>
{service['description']}

<b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:</b>
1. –û–±—Å—É–∂–¥–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
2. –ó–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä, 50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
3. –í—ã–ø–æ–ª–Ω—è—é —Ä–∞–±–æ—Ç—É —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞–º–∏
4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞ –∏ –¥–æ–ø–ª–∞—Ç–∞

üí¨ <i>–ú–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç!</i>"""
            
            await query.edit_message_text(
                message,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif data.startswith("create_order_"):
        service_type = data.replace("create_", "")
        service = SERVICES_DATA.get(service_type)
        
        if service:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
            ORDER_STATES[user_id] = {
                'service_type': service_type,
                'service_name': service['name'],
                'step': 'name'
            }
            
            keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]]
            
            await query.edit_message_text(
                f"""üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {service['name']}</b>

<b>–®–∞–≥ 1 –∏–∑ 4:</b> –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?

–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.""",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif data == "cancel_order":
        if user_id in ORDER_STATES:
            del ORDER_STATES[user_id]
        
        await query.edit_message_text(
            "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
    
    # –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    elif data.startswith("portfolio_"):
        category_messages = {
            'portfolio_twins': "ü§ñ <b>–¶–∏—Ñ—Ä–æ–≤—ã–µ –¥–≤–æ–π–Ω–∏–∫–∏</b>\n\n–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ AI-–º–æ–¥–µ–ª–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ, –∫–ª–∏–ø–∞—Ö –∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö.",
            'portfolio_photos': "üì∏ <b>AI-—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏</b>\n\n–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤ –æ–¥–µ–∂–¥—ã –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.",
            'portfolio_videos': "üé¨ <b>–í–∏–¥–µ–æ-—Å–Ω–∏–ø–ø–µ—Ç—ã</b>\n\n–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏ –¥–ª—è TikTok/Reels –∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤.",
            'portfolio_covers': "üé® <b>–û–±–ª–æ–∂–∫–∏ —Ä–µ–ª–∏–∑–æ–≤</b>\n\n–î–∏–∑–∞–π–Ω –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI."
        }
        
        message = category_messages.get(data, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        keyboard = [
            [InlineKeyboardButton("üåê –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", web_app={"url": WEBSITE_URL})],
            [InlineKeyboardButton("üìã –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–µ–µ", callback_data="start_order")],
            [InlineKeyboardButton("üîô –ö –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data="portfolio")]
        ]
        
        await query.edit_message_text(
            message,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "start_order":
        await query.edit_message_text(
            "üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è –∑–∞–∫–∞–∑–∞:</b>",
            parse_mode='HTML',
            reply_markup=get_services_keyboard()
        )

async def handle_order_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in ORDER_STATES:
        return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑–∞
    
    from alyx_bot import db, OWNER_ID
    
    order_state = ORDER_STATES[user_id]
    text = update.message.text
    
    if order_state['step'] == 'name':
        order_state['name'] = text
        order_state['step'] = 'contact'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]]
        
        await update.message.reply_text(
            f"""üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order_state['service_name']}</b>

<b>–®–∞–≥ 2 –∏–∑ 4:</b> –ö–æ–Ω—Ç–∞–∫—Ç—ã

–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏—Ç–µ:
‚Ä¢ Telegram: @username
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (xxx) xxx-xx-xx  
‚Ä¢ Email: example@mail.com

–ò–ª–∏ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏.""",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif order_state['step'] == 'contact':
        order_state['contact'] = text
        order_state['step'] = 'budget'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]]
        
        await update.message.reply_text(
            f"""üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order_state['service_name']}</b>

<b>–®–∞–≥ 3 –∏–∑ 4:</b> –ë—é–¥–∂–µ—Ç

–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–µ–∫—Ç?

–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—É–º–º—É
‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5,000-10,000‚ÇΩ)
‚Ä¢ "–û–±—Å—É–¥–∏–º" - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å""",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif order_state['step'] == 'budget':
        order_state['budget'] = text
        order_state['step'] = 'description'
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]]
        
        await update.message.reply_text(
            f"""üìã <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order_state['service_name']}</b>

<b>–®–∞–≥ 4 –∏–∑ 4:</b> –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ:
‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å?
‚Ä¢ –ö–∞–∫–∞—è —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞?
‚Ä¢ –ï—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã?
‚Ä¢ –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è?

–ß–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Å–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç!""",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif order_state['step'] == 'description':
        order_state['description'] = text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        order_data = {
            'user_id': user_id,
            'username': update.effective_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω',
            'first_name': update.effective_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'service_type': order_state['service_type'],
            'service_name': order_state['service_name'],
            'name': order_state['name'],
            'contact': order_state['contact'],
            'budget': order_state['budget'],
            'description': order_state['description']
        }
        
        order_id = db.add_order(order_data)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        del ORDER_STATES[user_id]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await update.message.reply_text(
            f"""‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
‚Ä¢ –°–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
‚Ä¢ –û–±—Å—É–¥–∏–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞  
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –±—é–¥–∂–µ—Ç
‚Ä¢ –ó–∞–∫–ª—é—á–∏–º –¥–æ–≥–æ–≤–æ—Ä –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ

<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
üìã –£—Å–ª—É–≥–∞: {order_state['service_name']}
üë§ –ò–º—è: {order_state['name']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {order_state['contact']}
üí∞ –ë—é–¥–∂–µ—Ç: {order_state['budget']}

üì± –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é: @alyx_babysitter

<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üôè</i>""",
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        owner_message = f"""üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>

<b>–ö–ª–∏–µ–Ω—Ç:</b>
üë§ {order_data['first_name']} (@{order_data['username']})
üÜî ID: {user_id}

<b>–ó–∞–∫–∞–∑:</b>
üìã {order_data['service_name']}
üí∞ –ë—é–¥–∂–µ—Ç: {order_data['budget']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {order_data['contact']}

<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>
{order_data['description']}

<i>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order_data.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</i>"""
        
        try:
            await context.bot.send_message(
                chat_id=OWNER_ID,
                text=owner_message,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async def broadcast_message(context: ContextTypes.DEFAULT_TYPE, message: str, parse_mode='HTML'):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    from alyx_bot import db
    
    sent_count = 0
    failed_count = 0
    
    for subscriber_id in db.subscribers:
        try:
            await context.bot.send_message(
                chat_id=subscriber_id,
                text=message,
                parse_mode=parse_mode
            )
            sent_count += 1
        except Exception as e:
            failed_count += 1
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscriber_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–ª–∞–¥–µ–ª—å—Ü—É
    stats_message = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>

‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}
‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}
üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(db.subscribers)}"""
    
    try:
        from alyx_bot import OWNER_ID
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=stats_message,
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    from alyx_bot import OWNER_ID
    
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text(
            """üì¢ <b>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>

<b>–ü—Ä–∏–º–µ—Ä:</b>
/broadcast üéâ –ù–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ AI-–ø–æ—Ä—Ç—Ä–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ Y2K.""",
            parse_mode='HTML'
        )
        return
    
    message = ' '.join(context.args)
    await broadcast_message(context, f"üîî <b>–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç Alyx Babysitter</b>\n\n{message}")
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    from alyx_bot import db, OWNER_ID
    
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    total_users = len(db.users)
    total_orders = len(db.orders)
    total_subscribers = len(db.subscribers)
    
    # –°—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    from datetime import datetime, timedelta
    week_ago = datetime.now() - timedelta(days=7)
    new_users_week = sum(1 for user in db.users.values() if user['joined_at'] > week_ago)
    
    stats_message = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_subscribers}

üìã <b>–ó–∞–∫–∞–∑—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}

üéØ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start, /portfolio, /services

‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
    
    await update.message.reply_text(stats_message, parse_mode='HTML')